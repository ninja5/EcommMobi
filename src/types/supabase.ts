/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** OpenAPI description (this document) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.profiles.id"];
                    updated_at?: components["parameters"]["rowFilter.profiles.updated_at"];
                    username?: components["parameters"]["rowFilter.profiles.username"];
                    full_name?: components["parameters"]["rowFilter.profiles.full_name"];
                    avatar_url?: components["parameters"]["rowFilter.profiles.avatar_url"];
                    website?: components["parameters"]["rowFilter.profiles.website"];
                    profile?: components["parameters"]["rowFilter.profiles.profile"];
                    /** @description Filtering Columns */
                    select?: components["parameters"]["select"];
                    /** @description Ordering */
                    order?: components["parameters"]["order"];
                    /** @description Limiting and Pagination */
                    offset?: components["parameters"]["offset"];
                    /** @description Limiting and Pagination */
                    limit?: components["parameters"]["limit"];
                };
                header?: {
                    /** @description Limiting and Pagination */
                    Range?: components["parameters"]["range"];
                    /** @description Limiting and Pagination */
                    "Range-Unit"?: components["parameters"]["rangeUnit"];
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferCount"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["profiles"][];
                        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["profiles"][];
                        "application/vnd.pgrst.object+json": components["schemas"]["profiles"][];
                        "text/csv": components["schemas"]["profiles"][];
                    };
                };
                /** @description Partial Content */
                206: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: {
                    /** @description Filtering Columns */
                    select?: components["parameters"]["select"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferPost"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["profiles"];
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.profiles.id"];
                    updated_at?: components["parameters"]["rowFilter.profiles.updated_at"];
                    username?: components["parameters"]["rowFilter.profiles.username"];
                    full_name?: components["parameters"]["rowFilter.profiles.full_name"];
                    avatar_url?: components["parameters"]["rowFilter.profiles.avatar_url"];
                    website?: components["parameters"]["rowFilter.profiles.website"];
                    profile?: components["parameters"]["rowFilter.profiles.profile"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferReturn"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.profiles.id"];
                    updated_at?: components["parameters"]["rowFilter.profiles.updated_at"];
                    username?: components["parameters"]["rowFilter.profiles.username"];
                    full_name?: components["parameters"]["rowFilter.profiles.full_name"];
                    avatar_url?: components["parameters"]["rowFilter.profiles.avatar_url"];
                    website?: components["parameters"]["rowFilter.profiles.website"];
                    profile?: components["parameters"]["rowFilter.profiles.profile"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferReturn"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["profiles"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        profiles: {
            /**
             * Format: uuid
             * @description Note:
             *     This is a Primary Key.<pk/>
             */
            id: string;
            /** Format: timestamp with time zone */
            updated_at?: string;
            /** Format: text */
            username?: string;
            /** Format: text */
            full_name?: string;
            /** Format: text */
            avatar_url?: string;
            /** Format: text */
            website?: string;
            /**
             * Format: text
             * @default USER
             */
            profile: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Preference */
        preferParams: "params=single-object";
        /** @description Preference */
        preferReturn: "return=representation" | "return=minimal" | "return=none";
        /** @description Preference */
        preferCount: "count=none";
        /** @description Preference */
        preferPost: "return=representation" | "return=minimal" | "return=none" | "resolution=ignore-duplicates" | "resolution=merge-duplicates";
        /** @description Filtering Columns */
        select: string;
        /** @description On Conflict */
        on_conflict: string;
        /** @description Ordering */
        order: string;
        /** @description Limiting and Pagination */
        range: string;
        /** @description Limiting and Pagination */
        rangeUnit: string;
        /** @description Limiting and Pagination */
        offset: string;
        /** @description Limiting and Pagination */
        limit: string;
        "rowFilter.profiles.id": string;
        "rowFilter.profiles.updated_at": string;
        "rowFilter.profiles.username": string;
        "rowFilter.profiles.full_name": string;
        "rowFilter.profiles.avatar_url": string;
        "rowFilter.profiles.website": string;
        "rowFilter.profiles.profile": string;
    };
    requestBodies: {
        /** @description profiles */
        profiles: {
            content: {
                "application/json": components["schemas"]["profiles"];
                "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["profiles"];
                "application/vnd.pgrst.object+json": components["schemas"]["profiles"];
                "text/csv": components["schemas"]["profiles"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
